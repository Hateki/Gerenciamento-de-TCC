package br.edu.unipampa.model;
// Generated 21/06/2014 18:48:59 by Hibernate Tools 3.6.0

import br.edu.unipampa.bancoDeDados.hibernate.HibernateUtil;
import static br.edu.unipampa.model.web.AcessoSistema.CADASTRO_CONCLUIDO;
import static br.edu.unipampa.model.web.AcessoSistema.LISTA_INCORRETA;
import static br.edu.unipampa.model.web.AcessoSistema.USUARIO_JA_EXISTENTE;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.hibernate.Session;

/**
 * Professor generated by hbm2java
 */
public class Professor implements java.io.Serializable {

    private final int POSICAO_NOME = 0;
    private final int POSICAO_SENHA = 1;
    private final int POSICAO_CPF = 2;
    private final int POSICAO_INSTITUICAO = 3;
    private final int POSICAO_EMAIL = 4;
    public static final int LISTA_INCORRETA = 2;
    public static final int USUARIO_JA_EXISTENTE = 1;
    public static final int CADASTRO_CONCLUIDO = 0;

    private int siape;
    private Pessoa pessoa;
    private Set bancas = new HashSet(0);
    private Set temas = new HashSet(0);

    public Professor() {
    }

    public Professor(int siape, Pessoa pessoa) {
        this.siape = siape;
        this.pessoa = pessoa;
    }

    public Professor(int siape, Pessoa pessoa, Set bancas, Set temas) {
        this.siape = siape;
        this.pessoa = pessoa;
        this.bancas = bancas;
        this.temas = temas;
    }

    public int getSiape() {
        return this.siape;
    }

    public void setSiape(int siape) {
        this.siape = siape;
    }

    public Pessoa getPessoa() {
        return this.pessoa;
    }

    public void setPessoa(Pessoa pessoa) {
        this.pessoa = pessoa;
    }

    public Set getBancas() {
        return this.bancas;
    }

    public void setBancas(Set bancas) {
        this.bancas = bancas;
    }

    public Set getTemas() {
        return this.temas;
    }

    public void setTemas(Set temas) {
        this.temas = temas;
    }

    public String getSenha() {
        return pessoa.getSenha();
    }

    public String getNome() {
        return pessoa.getNome();
    }

    public String getUsuario() {
        return pessoa.getUsuario();
    }

    /**
     * Método cadastra pessoas externas no sistema
     *
     * @param dados Lista com os dados da pessoa a ser cadastrada, sendo que a
     * posição 0 é o nome, a 1 é a senha, a 2 é o CPF e a 3 é a instituiçâo
     *
     * @return 0 se o cadastro foi bem sucedido, 1 se o usuário já existe no
     * sistema e 2 se a lista fornecida não tem 4 posiçôes
     */
    public int cadastraPessoaExterna(List<String> dados) {
        Session sessao = HibernateUtil.getSessionFactory().getCurrentSession();
        sessao.beginTransaction();
        Pessoa pessoa = new Pessoa();

        if (dados.size() != 5) {
            return LISTA_INCORRETA;
        }

        pessoa.setUsuario(dados.get(POSICAO_NOME));
        pessoa.setSenha(dados.get(POSICAO_SENHA));
        pessoa.setEmail(dados.get(POSICAO_EMAIL));
        pessoa.setNome(dados.get(POSICAO_NOME));
        pessoa.setCpf(dados.get(POSICAO_CPF));
        pessoa.setInstituicao(dados.get(POSICAO_INSTITUICAO));

        if (verificaExistencia(pessoa, sessao)) {
            return USUARIO_JA_EXISTENTE;
        }

        sessao.save(pessoa);
        sessao.getTransaction().commit();

        return CADASTRO_CONCLUIDO;
    }
    
    /**
     * Verifica se existe uma pessoa com o nome especificado
     *
     * @param pessoa Pessoa com o nome para se verificar
     * @param sessao Sessão com a transassão já inicializada
     * @return true se uma pessoa com o mesmo nome foi encontrada
     */
    public boolean verificaExistencia(Pessoa pessoa, Session sessao) {
        List<Pessoa> pessoasBanco;
        pessoasBanco = (List<Pessoa>) sessao.createQuery("From Pessoa").list();

        for (Pessoa encontrado : pessoasBanco) {
            if (encontrado.getUsuario().equals(pessoa.getUsuario())) {
                return true;
            }
        }
        return false;
    }
    
    /**
     * Método olha o tema que o professor escolheu e confirma ele
     *
     * @param listaTemas lista de temas para se procurar o tema escolhido
     * @param temaEscolhido qual foi o tema escolhido
     */
    public void confirmarTema(List<Tema> listaTemas, int temaEscolhido) {
        Tema escolhido = null;
        Session sessao = HibernateUtil.getSessionFactory().getCurrentSession();
        sessao.beginTransaction();
        if (listaTemas != null) {
            for (int i = 0; i < listaTemas.size(); i++) {
                if (i == temaEscolhido - 1) {
                    escolhido = listaTemas.get(i);
                    break;
                }
            }
            if (escolhido != null) {
                escolhido.setAprovado(true);
            }
            sessao.update(escolhido);

            carregarDados(listaTemas);//Carrega os temas para que não ocorra um erro
        }
    }
    
    /**
     * Procura o tema escolhido pelo professor e apaga o tema do banco de dados
     *
     * @param listaTemas Lista de temas para se procurar
     * @param temaEscolhido Tema que foi escolhido
     */
    public void recusarTema(List<Tema> listaTemas, int temaEscolhido) {
        Tema escolhido = null;
        Session sessao = HibernateUtil.getSessionFactory().getCurrentSession();
        sessao.beginTransaction();
        if (listaTemas != null) {
            for (int i = 0; i < listaTemas.size(); i++) {
                if (i == temaEscolhido - 1) {
                    escolhido = listaTemas.get(i);
                    break;
                }
            }
            sessao.delete(escolhido);

            carregarDados(listaTemas);//Carrega os temas para que não ocorra um erro

        }
    }
    
     /**
     * Carrega os atributos do tema para que não ocorra um erro na hora da
     * execução
     *
     * @param temas temas para se carregar
     */
    public void carregarDados(List<Tema> temas) {
        for (Tema tema : temas) {
            tema.getAprovado();
            tema.getAluno().getNome();
            tema.getDescricao();
        }
    }
    
    public boolean cadastrarBanca(int matriculaAluno, String data, String horario,
            String local, String usuarioOrientador,
            String professor1, String professor2, String professor3) {
        
        Session sessao = HibernateUtil.getSessionFactory().getCurrentSession();
        sessao.beginTransaction();
        
        Aluno aluno = procurarAluno(matriculaAluno,sessao);
        Professor professor = procurarProfessor(usuarioOrientador,sessao);
        Pessoa convidado1 = procurarPessoa(professor1,sessao);
        Pessoa convidado2 = procurarPessoa(professor2,sessao);
        Pessoa convidado3 = procurarPessoa(professor3,sessao);
        Banca banca = new Banca();
        
        if(aluno == null){
            return false;
        }

        if (convidado1 != null && convidado2 != null
                && professor != null) {

            banca.setData(data);
            banca.setLocal(local);
            banca.setHorario(horario);
            banca.setPessoaByConvidado1IdPessoa(convidado1);
            banca.setPessoaByConvidado2IdPessoa(convidado2);
            banca.setPessoaByConvidado3IdPessoa(convidado3);
            banca.setAluno(aluno);
            banca.setProfessor(professor);

            sessao.save(banca);

            sessao.getTransaction().commit();
            
            return true;
        }
        return false;
    }
    
    /**
     * Procura um aluno através de matrícula
     *
     * @param matriculaAluno Matricula do aluno para se para se procurar
     * @return Aluno encontrado
     */
    public Aluno procurarAluno(int matriculaAluno,Session sessao) {
        List<Aluno> alunosEncontrados = sessao.createQuery("From Aluno").list();
        for (Aluno aluno : alunosEncontrados) {
            if (matriculaAluno == aluno.getMatricula()) {
                return aluno;
            }
        }
        return null;
    }

    /**
     * Procura uma pessoa através do usuário especificado
     *
     * @param usuario Usuário pra se procurar
     * @return O usuário encontrado
     */
    public Pessoa procurarPessoa(String usuario,Session sessao) {
        List<Pessoa> pessoasEncontradas = sessao.createQuery("From Pessoa").list();
        for (Pessoa pessoa : pessoasEncontradas) {
            if (usuario.equals(pessoa.getUsuario())) {
                return pessoa;
            }
        }
        return null;
    }
    
    /**
     * Procura um professor através de um usuario
     *
     * @param usuarioProfessor Usuário para se procurar
     * @return retorna o professor encontrado
     */
    public Professor procurarProfessor(String usuarioProfessor,Session sessao) {
        List<Professor> listaProfessores = sessao.createQuery("From Professor").list();
        for (Professor professor : listaProfessores) {
            if (professor.getUsuario().equals(usuarioProfessor)) {
                return professor;
            }
        }
        return null;
    }
}
