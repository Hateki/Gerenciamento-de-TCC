package br.edu.unipampa.model;
// Generated 02/07/2014 19:53:43 by Hibernate Tools 3.6.0

import br.edu.unipampa.model.web.AcessoSistema;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Professor generated by hbm2java
 */
public class Professor implements java.io.Serializable {

    //////////Cadastro Pessoa Externa///////////////
    private final int POSICAO_NOME = 0;
    private final int POSICAO_SENHA = 1;
    private final int POSICAO_CPF = 2;
    private final int POSICAO_INSTITUICAO = 3;
    private final int POSICAO_EMAIL = 4;
    public static final int LISTA_INCORRETA = 2;
    public static final int USUARIO_JA_EXISTENTE = 1;
    public static final int CADASTRO_CONCLUIDO = 0;
    ////////////////Login//////////////////////////

    private int siape;
    private Pessoa pessoa;
    private Set bancas = new HashSet(0);
    private Set temas = new HashSet(0);

    public Professor() {
    }

    public Professor(int siape, Pessoa pessoa) {
        this.siape = siape;
        this.pessoa = pessoa;
    }

    public Professor(int siape, Pessoa pessoa, Set bancas, Set temas) {
        this.siape = siape;
        this.pessoa = pessoa;
        this.bancas = bancas;
        this.temas = temas;
    }

    public int getSiape() {
        return this.siape;
    }

    public void setSiape(int siape) {
        this.siape = siape;
    }

    public Pessoa getPessoa() {
        return this.pessoa;
    }

    public void setPessoa(Pessoa pessoa) {
        this.pessoa = pessoa;
    }

    public Set getBancas() {
        return this.bancas;
    }

    public void setBancas(Set bancas) {
        this.bancas = bancas;
    }

    public Set getTemas() {
        return this.temas;
    }

    public void setTemas(Set temas) {
        this.temas = temas;
    }

    public String getSenha() {
        return pessoa.getSenha();
    }

    public String getNome() {
        return pessoa.getNome();
    }

    public String getUsuario() {
        return pessoa.getUsuario();
    }

    /**
     * Cadatra uma pessoa externa no sistema
     *
     * @param dados Lista de dados para se criar a pessoa
     * @return 0 se o cadastro foi concluído, 1 se o usuário já existe e 2 se a
     * lista estiver incompleta
     */
    public int cadastraPessoaExterna(List<String> dados) {
        Pessoa pessoa = new Pessoa();
        AcessoSistema acessoSistema = new AcessoSistema();

        if (dados.size() != 5) {
            return LISTA_INCORRETA;
        }

        pessoa.setUsuario(dados.get(POSICAO_NOME));
        pessoa.setSenha(dados.get(POSICAO_SENHA));
        pessoa.setEmail(dados.get(POSICAO_EMAIL));
        pessoa.setNome(dados.get(POSICAO_NOME));
        pessoa.setCpf(dados.get(POSICAO_CPF));
        pessoa.setInstituicao(dados.get(POSICAO_INSTITUICAO));

        if (acessoSistema.verificaExistencia(pessoa)) {
            return USUARIO_JA_EXISTENTE;
        }

        acessoSistema.cadastraPessoaExterna(pessoa);

        return CADASTRO_CONCLUIDO;
    }

    /**
     * Método olha o tema que o professor escolheu e confirma ele
     *
     * @param listaTemas lista de temas para se procurar o tema escolhido
     * @param temaEscolhido qual foi o tema escolhido
     * @param coordenador true se quem está confirmando é o coordenador de TCC
     */
    public void confirmarTema(List<Tema> listaTemas, int temaEscolhido, boolean coordenador) {
        Tema escolhido = null;
        AcessoSistema acessoSistema = new AcessoSistema();
        if (listaTemas != null) {
            for (int i = 0; i < listaTemas.size(); i++) {
                if (i == temaEscolhido - 1) {
                    escolhido = listaTemas.get(i);
                    break;
                }
            }
            if (escolhido != null) {
                if (coordenador) {
                    escolhido.setAprovado(Tema.APROVADO_COODENADOR);
                } else {
                    escolhido.setAprovado(Tema.APROVADO_ORIENTADOR);
                }
            }
            acessoSistema.atualizarTema(escolhido);
            acessoSistema.carregarDados(listaTemas);
        }
    }

    /**
     * Procura o tema escolhido pelo professor e apaga o tema do banco de dados
     *
     * @param listaTemas Lista de temas para se procurar
     * @param temaEscolhido Tema que foi escolhido
     */
    public void recusarTema(List<Tema> listaTemas, int temaEscolhido) {
        Tema escolhido = null;
        AcessoSistema acessoSistema = new AcessoSistema();
        if (listaTemas != null) {
            for (int i = 0; i < listaTemas.size(); i++) {
                if (i == temaEscolhido - 1) {
                    escolhido = listaTemas.get(i);
                    break;
                }
            }
            acessoSistema.deletarTema(escolhido);
            acessoSistema.carregarDados(listaTemas);
        }
    }
    
    public boolean cadastrarBanca(int matriculaAluno, String usuarioOrientador,
            String professor1, String professor2, String professor3) {
        
        AcessoSistema acessoSistema = new AcessoSistema();
        Aluno aluno = acessoSistema.procurarAluno(matriculaAluno);
        Professor professor = acessoSistema.procurarProfessor(usuarioOrientador);
        Pessoa convidado1 = acessoSistema.procurarPessoa(professor1);
        Pessoa convidado2 = acessoSistema.procurarPessoa(professor2);
        Pessoa convidado3 = acessoSistema.procurarPessoa(professor3);
        Banca banca = new Banca();

        if (aluno == null) {
            return false;
        }

        if (convidado1 != null && convidado2 != null
                && professor != null) {

            banca.setPessoaByConvidado1IdPessoa(convidado1);
            banca.setPessoaByConvidado2IdPessoa(convidado2);
            banca.setPessoaByConvidado3IdPessoa(convidado3);
            banca.setAluno(aluno);
            banca.setProfessor(professor);
            
            acessoSistema.salvarBanca(banca);

            return true;
        }
        return false;
    }
}
